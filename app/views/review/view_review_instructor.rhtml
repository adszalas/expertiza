<!-- The instructor is taken to this page where he can give a feedback to the reviewer for his review.
This page displays the submission by the author, the review by the reviwer if any, the feedback
by the author if any. If the instructor has given a feedback already, he has a link to View and
Edit his review , other wise he has a link to Begin his review -->


<h1>View Review</h1>
<%if @assgt.wiki_type.name == "No"%>
<%if @file != nil and @files.size == 0%>

<%else%>
Submitted Files<br />
<%end%>
<%end%>

<%
 _time = Time.now.month.to_s + "/" + Time.now.day.to_s + "/" + Time.now.year.to_s
 if @assgt.wiki_type.name == "DokuWiki" %>
<br>
<b>DokuWiki Review Links:</b>
<br>
<br>
<%= review_dokuwiki @assgt.directory_path, _time, @author_name  %>
<br>
<% elsif @assgt.wiki_type.name == "MediaWiki" %>
<br>
<b>MediaWiki Review Links:</b>
<br>
<br>
<!--The following checks a wiki type.  If we add a new wiki type, we need to modify this code, which is in
    a very unexpected place.  This should be done by polymorphism, based on a Wiki class that is subclassed
    for various kinds of wikis. 
    
    Make a generic review_wiki function, with a parameter specifying wiki type.  The review_wiki function
    then makes callbacks to the various wiki classes, depending on what kind of a wiki it is working on.
    This allows wiki-specific behavior to be kept in the wiki classes. -->
<%if @assgt.team_assignment  # The lookup of all team members should be put in a wiki helper
  	for team_member in @team_members
		member_name = User.find(team_member.user_id).name 
%>
	<%= review_mediawiki_group @assgt.directory_path, _time, member_name  %>
	<%end%>
<%else%>
	<%= review_mediawiki @assgt.directory_path, _time, @author_name  %>
<%end%>
<br>
<% end %>
<ul>
<% for file in @files %>
<li><%= link_to File.basename(file), :action => 'edit_review', :id => @mapping_id, :fname => File.basename(file),"current_folder[name]" => @current_folder.name %></li>
<% end %>
</ul>

<!-- Display the review by reviwer -->
<strong>Reviewed <%= @review.review_num_for_author %> at <%= @review.updated_at %></strong>
<%= render :partial => 'review/score1' %> 
Additional Comment : <%=@review.additional_comment%><br/>
<br/>
<%if(ReviewFeedback.find(:first,:conditions =>["review_id = ? and author_id = ?", @review.id, @a]))
      		  	review_feedback_text = ReviewFeedback.find(:first,:conditions =>["review_id = ? and assignment_id = ?", @review.id, @assgt.id]).additional_comment
%>
<!-- Display the author feedback if any -->		     
Feedback received from Author:<br/>
<%= render :partial =>'review/score2' %>
<p>Additional Comment </p>
<%=review_feedback_text%><br/>
<%else%>
<p> No Feedback Received from author </p>
<% end %>

<!-- Check if the instructor has already given a feedbak, if there is a feedback give links to
View and Edit , otherwise give links to Begin -->

<% if(ReviewFeedback.find(:first, :conditions =>["review_id = ? and author_id = ?", @review_id, @user_id]))
%>
<p> View your previous feedback : <%= link_to "View", {:controller =>'review_feedback', :action=>'view_feedback', :id1 =>@assgt.id, :id2 =>@user_id, :id3=>@review_id} %><p>
<p> Edit your previous feedback : <%= link_to "Edit", {:controller =>'review_feedback', :action =>'edit_feedback', :id1 =>@assgt.id, :id2 =>@user_id, :id3=>@review_id} %></p>
<%else%>
<p><label>Give feedback to reviewer:<%= link_to "Begin", {:controller => 'review_feedback', :action => 'new_feedback',:id1 =>@assgt.id, :id2 =>@user_id, :id3=>@review_id} %></label></p>
<%end%>
<%= link_to 'Back', :action => 'list_reviews', :id => @assgt.id %>


